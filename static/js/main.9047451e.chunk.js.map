{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","username","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAeeA,EAbF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,SAC7B,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACrB,6BACI,4BAAKF,GACL,4BAAKG,GACL,2BAAIF,MCcLM,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,6BAEMA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBG,SAAUK,EAAOG,GAAGR,SACpBF,MAAOO,EAAOG,GAAGV,aCCtBY,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACE,yBAAKX,UAAU,OACb,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTTP,EAAS,CAClB,CACIN,GAAI,EACJF,KAAM,aACNG,SAAU,KACVF,MAAO,yBAEX,CACIC,GAAI,EACJF,KAAM,iBACNG,SAAU,QACVF,MAAO,uBAEX,CACIC,GAAI,EACJF,KAAM,eACNG,SAAU,OACVF,MAAO,mBAEX,CACIC,GAAI,EACJF,KAAM,iBACNG,SAAU,KACVF,MAAO,2BAEX,CACIC,GAAI,EACJF,KAAM,eACNG,SAAU,OACVF,MAAO,wBAEX,CACIC,GAAI,EACJF,KAAM,iBACNG,SAAU,SACVF,MAAO,2BAEX,CACIC,GAAI,EACJF,KAAM,gBACNG,SAAU,QACVF,MAAO,0BAEX,CACIC,GAAI,EACJF,KAAM,eACNG,SAAU,QACVF,MAAO,yBAEX,CACIC,GAAI,EACJF,KAAM,cACNG,SAAU,QACVF,MAAO,wBAEX,CACIC,GAAI,GACJF,KAAM,mBACNG,SAAU,OACVF,MAAO,8BCvBAkB,G,kBA7Bb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACXjB,OAAQA,EACRM,YAAa,IAJH,E,sEAYJ,IAAD,OACDY,EAAiBC,KAAKF,MAAMjB,OAAOoB,QAAO,SAAApB,GAC9C,OAAOA,EAAOR,KACX6B,cACAC,SAAS,EAAKL,MAAMX,YAAYe,kBAGrC,OACE,yBAAKzB,UAAU,MACb,wBAAI2B,MAAM,MAAV,eACA,kBAAC,EAAD,CAAWhB,aAAcY,KAAKP,iBAC9B,kBAAC,EAAD,CAAUZ,OAAQkB,S,GAxBRM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9047451e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id, username } ) => {\n    return (\n        <div className='tc bg-light-purple dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <h3>{username}</h3>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n      <div>\n        {\n            robots.map((user, i) => {\n                return (\n                  <Card\n                    key={i}\n                    id={robots[i].id}\n                    name={robots[i].name}\n                    username={robots[i].username}\n                    email={robots[i].email}\n                  />\n                );\n            })\n        }\n      </div>\n    );\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n      <div className='pa2'>\n        <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type=\"search\" \n            placeholder=\"search robots\"\n            onChange={searchChange} \n        />\n      </div>\n    );\n}\n\nexport default SearchBox\n","export const robots = [\n    {\n        id: 1,\n        name: 'Tj Linares',\n        username: 'TJ',\n        email: 'tjlinares23@gmail.com'\n    },\n    {\n        id: 2,\n        name: 'Lany Totentino',\n        username: 'Belle',\n        email: 'lanybelle@gmail.com'\n    },\n    {\n        id: 3,\n        name: 'Ricky Deoleo',\n        username: 'Rick',\n        email: 'Ricky@gmail.com'\n    },\n    {\n        id: 4,\n        name: 'Gregory Tejada',\n        username: 'GT',\n        email: 'gregorytejada@gmail.com'\n    },\n    {\n        id: 5,\n        name: 'Hector David',\n        username: 'Gary',\n        email: 'garycastro@gmail.com'\n    },\n    {\n        id: 6,\n        name: 'Gabriel Pineda',\n        username: 'Pastor',\n        email: 'gabrielpineda@gmail.com'\n    }, \n    {\n        id: 7,\n        name: 'Rolando Gomez',\n        username: 'Serio',\n        email: 'rolandogomez@gmail.com'\n    }, \n    {\n        id: 8,\n        name: 'Michael Cruz',\n        username: 'Oreja',\n        email: 'michaelcruz@gmail.com'\n    }, \n    {\n        id: 9,\n        name: 'Tania Urena',\n        username: 'Smart',\n        email: 'taniaurena@gmail.com'\n    }, \n    {\n        id: 10,\n        name: 'Leonel Fernandez',\n        username: 'Leon',\n        email: 'leonelfernandez@gmail.com'\n    }, \n]","import React, { Component } from 'react'\nimport CardList from './CardList';\nimport SearchBox from './SearchBox'\nimport { robots } from './robots';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: robots,\n      searchfield: \"\"\n    };\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchfield: event.target.value })\n  };\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robots => {\n      return robots.name\n        .toLowerCase()\n        .includes(this.state.searchfield.toLowerCase());\n    })\n\n    return (\n      <div className=\"tc\">\n        <h1 class='f1'>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <CardList robots={filteredRobots} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}